==========================================================================================
kernel code
==========================================================================================
/drivers/video/mxc/ldb.c: line 137; // add lvds display to the option. in uEnv.txt, one can select this lvds

static struct fb_videomode ldb_modedb[] = {
	{
	 "LDB-WXGA", 60, 1280, 800, 14065,
	 40, 40,
	 10, 3,
	 80, 10,
	 0,
	 FB_VMODE_NONINTERLACED,
	 FB_MODE_IS_DETAILED,},
	{
	 "LDB-XGA", 60, 1024, 768, 15385,
	 220, 40,
	 21, 7,
	 60, 10,
	 0,
	 FB_VMODE_NONINTERLACED,
	 FB_MODE_IS_DETAILED,},
	{
	 "LDB-1080P60", 60, 1920, 1080, 7692,
	 100, 40,
	 30, 3,
	 10, 2,
	 0,
	 FB_VMODE_NONINTERLACED,
	 FB_MODE_IS_DETAILED,},
+	{
+	 "LDB-320P60", 60, 320, 480, 125000,
+	 3, 3,
+	 2, 4,
+	 2, 2,
+	 0,
+	 FB_VMODE_NONINTERLACED,
+	 FB_MODE_IS_DETAILED,},
};

__________________________________________________________________________________________

arch/arm/mach-imx/clk-imx6q.c: line 669
-	init_ldb_clks(pll2_pfd0_352m);
+	// init_ldb_clks(pll5_video); // Yuefeng's change, this is to change the clock parent, so that clock can reach 8MHz, however, it somehow doesn't work. we nned totaly disable this ldb clk setup in kernel code and use uboot to setup the clock

__________________________________________________________________________________________

arch/arm/boot/dts/imx6qdl-hummingboard.dtsi: line 85 

mxcfb1: fb@0 {
		compatible = "fsl,mxc_sdc_fb";
		disp_dev = "ldb";
		interface_pix_fmt = "RGB666";
		mode_str ="320x480M@60";
		default_bpp = <18>;
		int_clk = <0>;  // <--- change this value to 0 if it is not
		late_init = <0>;
		status = "okay";
	};

__________________________________________________________________________________________

arch/arm/boot/dts/imx6qdl-hummingboard.dtsi: line 85 // this is to enable ldb driver in the kernel

+	&ldb {
+		ipu_id = <0>;
+		disp_id = <1>;
+		ext_ref = <1>;
+		mode = "sin0";
+		sec_ipu_id = <0>;
+		sec_disp_id = <0>;
+	  status = "okay";

+	   lvds-channel@0 {
+	      fsl,data-mapping = "spwg";
+	      fsl,data-width = <18>;
+	      status = "okay";

+	      display-timings {
+	         native-mode = <&timing0>;
+	         timing0: hsd100pxn1 {
+	           clock-frequency = <8000000>;
+	            hactive = <320>;
+	            vactive = <480>;
+	            hback-porch = <3>;
+	            hfront-porch = <3>;
+	            vback-porch = <2>;
+	            vfront-porch = <4>;
+	            hsync-len = <2>;
+	            vsync-len = <2>;
+	        };
+	     };
+	   };
+	};


==========================================================================================
uEnv.txt:
==========================================================================================

change to: 
mmcargs=setenv bootargs root=/dev/mmcblk0p1 rootwait rw console=tty1mxc0,115200n8 consoleblank=0 video=mxcfb0:dev=ldb,LDB-320P60 ahci_imx.hotplug=1 pci=nomsi loop.max_part=15

DO REMEMBER TO REMOVE "dmfc=3" !!

==========================================================================================
uboot code
==========================================================================================
= This change is no longer needed if we only need display when kernel boots !! 2016/03/27 
= There is additional info in this doc trying to enble display during uboot. =============

board/solidrun/mx6_cubox-i/mx6_cubox-i.c: line 489 // this is an important change to enble pll5 as video clock so that low lvds clock such as 8 MHz can be enabled.



-	/* set video pll to 455MHz (24MHz * (37+11/12) / 2) */
-	reg = readl(&mxc_ccm->analog_pll_video);
-	reg |= BM_ANADIG_PLL_VIDEO_POWERDOWN;
-	writel(reg, &mxc_ccm->analog_pll_video);

-	reg &= ~BM_ANADIG_PLL_VIDEO_DIV_SELECT;
-	reg |= BF_ANADIG_PLL_VIDEO_DIV_SELECT(37);
-	reg &= ~BM_ANADIG_PLL_VIDEO_POST_DIV_SELECT;
-	reg |= BF_ANADIG_PLL_VIDEO_POST_DIV_SELECT(1);
-	writel(reg, &mxc_ccm->analog_pll_video);

-	writel(BF_ANADIG_PLL_VIDEO_NUM_A(11), &mxc_ccm->analog_pll_video_num);
-	writel(BF_ANADIG_PLL_VIDEO_DENOM_B(12), &mxc_ccm->analog_pll_video_denom);

-	reg &= ~BM_ANADIG_PLL_VIDEO_POWERDOWN;
-	writel(reg, &mxc_ccm->analog_pll_video);

-	while (timeout--)
-		if (readl(&mxc_ccm->analog_pll_video) & BM_ANADIG_PLL_VIDEO_LOCK)
-			break;
-	if (timeout < 0)
-		printf("Warning: video pll lock timeout!\n");

-	reg = readl(&mxc_ccm->analog_pll_video);
-	reg |= BM_ANADIG_PLL_VIDEO_ENABLE;
-	reg &= ~BM_ANADIG_PLL_VIDEO_BYPASS;
-	writel(reg, &mxc_ccm->analog_pll_video);

	
-	/* select video pll for ldb_di0_clk */
-	reg = readl(&mxc_ccm->cs2cdr);
-	reg &= ~(MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK);
-	writel(reg, &mxc_ccm->cs2cdr);

	/* Turn on LDB0,IPU DI0 clocks */  
+  	reg = __raw_readl(&mxc_ccm->CCGR3);  
+  	reg |=  MXC_CCM_CCGR3_LDB_DI0_MASK;  
+  	writel(reg, &mxc_ccm->CCGR3);  
  
+  	/* set LDB0 clk select to 000 (pll5) */  
+  	reg = readl(&mxc_ccm->cs2cdr);  
+  	reg &= ~(MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK);  
+  	reg |= (0 << MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET);  
+  	writel(reg, &mxc_ccm->cs2cdr); 

________________________________________________________________________________________

board/solidrun/mx6_cubox-i/mx6_cubox-i.c: line 452: // this is the try to enable lvds during uboot. This function can help successfully set the the clock to be 8 MHz in uboot. However, no display observed yet.

int board_video_skip(void)
{
        int ret;

        //ret = ipuv3_fb_init(&hdmi, 0, IPU_PIX_FMT_RGB24);
        ret = ipuv3_fb_init(&hdmi, 0, IPU_PIX_FMT_RGB666);

        if (ret)
                printf("HDMI cannot be configured: %d\n", ret);

	if (detect_hdmi())
		imx_enable_hdmi_phy();
		
+	enable_lvds();

    return ret;
}
________________________________________________________________________________________

board/solidrun/mx6_cubox-i/mx6_cubox-i.c: line 470 // this is the try to enable lvds during uboot. This function can help successfully set the the clock to be 8 MHz in uboot. However, no display observed yet.

+	static void enable_lvds()
+	{
+		struct iomuxc *iomux = (struct iomuxc *)
+					IOMUXC_BASE_ADDR;
+		u32 reg = readl(&iomux->gpr[2]);
+		reg |= IOMUXC_GPR2_DATA_WIDTH_CH0_24BIT;
+		writel(reg, &iomux->gpr[2]);
+		//gpio_direction_output(LVDS_BACKLIGHT_GP, 1);
+	}

________________________________________________________________________________________
