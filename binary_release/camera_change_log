Change log for mipi camera solution:
Prepared by, Yuefeng Zhu.

====================================================================
[ Kernel Change ]
====================================================================

1. ov5647_mipi.c (See ov5647_mipi_mod.c)

	1. enabled 5M output. several register need to be set correctly. Those are
		a. 0x380c to 0x380f: set to 0x0b, 0x1c, 0xb0, 0x11
		b. 0x3800 to 0x380b: set to 0x00, 0x0c, 0x00, 0x04, 0x0a, 0x3f, 0x07, 0x9f, 0x0a, 0x20, 0x07, 0x98
		c. 0x3814 to 0x3815: set to 0x11, 0x11

	2. minimize green tint
		a. enable AWB, but disable awb gain: set 0x5001 to x01, set 0x5002 to x40
		b. enable LENC, and adjust its paramters: set 0x5000 to 0x86 (or 0xFF), set 0x5800 to 0x5823 (green) to x00 and set 0x5824 to 0x583c (blue and red) to 0xFF,  

2. drivers/mxc/mipi/mxc_mipi_csi2.c: @ line 284: 

	+   tst_ctrl1 = 0x00000014; // change clock

		_mipi_csi2_lock(info);

		mipi_csi2_write(info, 0x0, MIPI_CSI2_PHY_SHUTDOWNZ);
		mipi_csi2_write(info, 0x0, MIPI_CSI2_DPHY_RSTZ);
		mipi_csi2_write(info, 0x0, MIPI_CSI2_CSI2_RESETN);

		mipi_csi2_write(info, 0x00000001, MIPI_CSI2_PHY_TST_CTRL0);
		mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL1);
		mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL0);
		mipi_csi2_write(info, 0x00000002, MIPI_CSI2_PHY_TST_CTRL0);
		mipi_csi2_write(info, 0x00010044, MIPI_CSI2_PHY_TST_CTRL1);
		mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL0);
		mipi_csi2_write(info, tst_ctrl1, MIPI_CSI2_PHY_TST_CTRL1);
		mipi_csi2_write(info, 0x00000002, MIPI_CSI2_PHY_TST_CTRL0);
		mipi_csi2_write(info, 0x00000000, MIPI_CSI2_PHY_TST_CTRL0);

3. Enable CONFIG_MX6_VPU_352M:

	i.MX6S/DL -> CONFIG_MX6_VPU_328M
	i.MX6D/Q -> CONFIG_MX6_VPU_352M

	CONFIG_MX6_VPU_328M(Prompt: MX6 VPU 328M)  
	CONFIG_MX6_VPU_352M(Prompt: MX6 VPU 352M)  
	 -> Device Drivers  
	  -> MXC support drivers  
	   -> MXC VPU(Video Processing Unit) support  
	    -> Support for MXC VPU(Video Processing Unit) 

4. change imx6qdl-hummingboard.dtsi file, if the booting doesn't use imx6q-hummingboard.dtb, copy imx6q-hummingboard.dtb to overwrite the loaded dtb file.

	&i2c1 {
		clock-frequency = <100000>;
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_hummingboard_i2c1>;
		status = "okay";

		/* Pro model */
		rtc: pcf8523@68 {
			compatible = "nxp,pcf8523";
			reg = <0x68>;
		};

		/* Pro model */
		sgtl5000: sgtl5000@0a {
			clocks = <&clks 201>;
			compatible = "fsl,sgtl5000";
			pinctrl-0 = <&pinctrl_hummingboard_sgtl5000>;
			pinctrl-names = "default";
			reg = <0x0a>;
			VDDA-supply = <&reg_3p3v>;
			VDDIO-supply = <&reg_3p3v>;
		};

+		/* Raspberry Pi camera rev 1.3 */
+		ov5647_mipi: ov5647_mipi@36 {
+			compatible = "ovti,ov5647_mipi";
+			reg = <0x36>;
+			/* Pi camera has its own 25MHz clock. */
+			clocks = <&clks 0>;
+			clock-names = "csi_mclk";
+			DOVDD-supply = <&reg_3p3v>;
+			AVDD-supply = <&reg_3p3v>;
+			DVDD-supply = <&reg_3p3v>;
+			pwn-gpios = <&gpio2 10 GPIO_ACTIVE_HIGH>;
+			led-gpios = <&gpio6 15 GPIO_ACTIVE_HIGH>;
+			ipu_id = <0>;
+			csi_id = <1>;
+			mclk = <25000000>;
+			mclk_source = <0>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&pinctrl_hummingboard_mipi>;
+			extended-buffer;
+		};
	};


5. arch/arm/mach-imx/clk-imx6q.c: @ line 694 //use hdmi clock to enable mipi clock, don't know why, but this works

+	// hdmi clock enable, yuefeng, hdmi_iahb,	hdmi_isfr
+	clk_prepare_enable(clk[hdmi_iahb]);
+	clk_prepare_enable(clk[hdmi_isfr]);


====================================================================
[Image Capture Code]
====================================================================
see ov5647_video_capture.tar.gz

the implementation is based on v4l2 driver. The output is bayer image, we use cv::ovtColor to transfer to RGB. ov5647 uses BGGR coding.











====================================================================
====================================================================
Below are used to generate output, no longer needed!!
====================================================================
====================================================================
[ Gstreamer for 1080p Realtime Capture ]

1. Gstreamer installation in ArchLinux:

	a. Code: 
		gstreamer-imx-1080p.tar.gz

	b. Installation:
		pacman -S gpu-viv-bin-mx6q-fb firmware-imx libfslvpuwrap linux-headers-imx6-cubox-dt python2 gcc pkg-config
		pacman -S gstreamer gst-plugins-good gst-plugins-bad gst-plugins-base gst-libav gst-vaapi

		export PKG_CONFIG_PATH='/opt/fsl/lib/pkgconfig'
		export LDFLAGS='-L/opt/fsl/lib'
		export CPPFLAGS='-I/opt/fsl/include'
		python2 ./waf configure --prefix=/usr --kernel-headers=/usr/include --egl-platform=fb
		python2 waf build
		python2 waf install

	c. Setup library:
		put following line in /etc/bash.bashrc

		export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/fsl/lib"


2. Gstreamer capture code:

	gst-launch-1.0 imxv4l2src capture-mode=2 capture-format=1 fps-n=15 queue-size=10 num-buffers=300 ! \                                                            
	video/x-bayer,width=1920,height=1080 ! queue ! \                                
	imxbayer1sthalf fbnum=2 fbset=1 extbuf=1 red=1.2 green=1 blue=2 chrom=140 ! queue ! \                                                                         
	imxbayer2ndhalf fbnum=2 ! queue ! \                                             
	video/x-raw,format=I420,width=1920,height=1080 ! queue ! \                      
	jpegenc ! multifilesink max-files=10 post-messages=true location=dest.jpg

3. Html code for realtime display:

	index.php

[ Opencv for 2592x1944 Image Capgure ]

1. installation

	pacman -S opencv
	pacman -S python2
	pacman -S python-numpy

2. Capture code:

	Capture2.py........

		from cv2 import *                                                               
		import sys                                                                      
		import time                                                                     
		import shutil                                                                   
		                                                                                
		def main():                                                                     
		    cam = VideoCapture(0)                                                       
		    test = 0                                                                    
		    while test < 10:                                                            
		        t0 = time.clock()                                                       
		        s, img = cam.read()                                                     
		        #s = ReadFrame(cam)                                                     
		        e1 = (time.clock() - t0)                                                
		        #img = cam.RetrieveFrame()                                              
		        imwrite("pycapture.jpg", img)                                           
		        e2 = (time.clock() - t0)                                                
		        shutil.copyfile("pycapture.jpg", "pycaptureD.jpg")                      
		        e3 = (time.clock() - t0)                                                
		                                                                                
		        print e1,e2,e3                                                          
		        time.sleep(0.1)                                                         
		        test = test + 1                                                         
		                                                                                
		    return 0                                                                    
		                                                                                
		if __name__ == '__main__':                                                      
		        main()



[ V4l2  ]